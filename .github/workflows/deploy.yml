name: 🚀 Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: 🔧 Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H "${{ secrets.SERVER_IP }}" >> ~/.ssh/known_hosts
    
    - name: 📥 Download deployment scripts
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cd /tmp
          # Clean up any existing deployment scripts to avoid cache issues
          rm -f auto-deploy.sh* 01-server-setup.sh* 02-app-deploy.sh* 03-nginx-setup.sh* 04-ssl-setup.sh* reboot-recovery.sh*
          
          # Download all deployment scripts (fresh copy with cache busting)
          wget -q -O auto-deploy.sh "https://raw.githubusercontent.com/${{ github.repository }}/main/deploy/auto-deploy.sh?t=$(date +%s)"
          wget -q -O 01-server-setup.sh "https://raw.githubusercontent.com/${{ github.repository }}/main/deploy/01-server-setup.sh?t=$(date +%s)"
          wget -q -O 02-app-deploy.sh "https://raw.githubusercontent.com/${{ github.repository }}/main/deploy/02-app-deploy.sh?t=$(date +%s)"
          wget -q -O 03-nginx-setup.sh "https://raw.githubusercontent.com/${{ github.repository }}/main/deploy/03-nginx-setup.sh?t=$(date +%s)"
          wget -q -O 04-ssl-setup.sh "https://raw.githubusercontent.com/${{ github.repository }}/main/deploy/04-ssl-setup.sh?t=$(date +%s)"
          wget -q -O reboot-recovery.sh "https://raw.githubusercontent.com/${{ github.repository }}/main/deploy/reboot-recovery.sh?t=$(date +%s)"

          # Make all scripts executable
          chmod +x *.sh
        EOF
    
    - name: 🚀 Deploy application
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cd /tmp

          # Set environment variables
          export DOMAIN_NAME="${{ secrets.DOMAIN_NAME || 'your-domain.com' }}"
          export GITHUB_REPO="${{ vars.DEPLOY_GITHUB_REPO || 'wjshku/LocalLifeAssistant' }}"
          export GITHUB_BRANCH="${{ vars.DEPLOY_GITHUB_BRANCH || 'main' }}"
          export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
          export FIREBASE_CREDENTIALS_PATH="${{ secrets.FIREBASE_CREDENTIALS_PATH || '/opt/locallifeassistant/backend/firebase-service-account.json' }}"
          export EMAIL="admin@$DOMAIN_NAME"

          echo "🔐 Setting up Firebase credentials..."

          # Copy from ubuntu user's home to the target location BEFORE deployment
          sudo cp /home/ubuntu/firebase-service-account.json "$FIREBASE_CREDENTIALS_PATH"

          # Set correct ownership and permissions for appuser
          sudo chown appuser:appuser "$FIREBASE_CREDENTIALS_PATH"
          sudo chmod 600 "$FIREBASE_CREDENTIALS_PATH"

          # Verify the file exists and has correct permissions
          if [ -f "$FIREBASE_CREDENTIALS_PATH" ]; then
            echo "✅ Firebase credentials file copied and secured"
            ls -la "$FIREBASE_CREDENTIALS_PATH"
          else
            echo "❌ Failed to copy Firebase credentials"
            exit 1
          fi

          # Run automated deployment
          ./auto-deploy.sh
        EOF
    
    - name: 🔍 Health check
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          echo "🔍 Performing post-deployment health check..."
          
          # Check if services are running
          if systemctl is-active --quiet locallifeassistant-backend; then
            echo "✅ Backend service is running"
          else
            echo "❌ Backend service is not running"
            exit 1
          fi
          
          if systemctl is-active --quiet nginx; then
            echo "✅ Nginx service is running"
          else
            echo "❌ Nginx service is not running"
            exit 1
          fi
          
          # Test backend health endpoint
          if curl -f http://localhost:8000/health > /dev/null 2>&1; then
            echo "✅ Backend health check passed"
          else
            echo "❌ Backend health check failed"
            exit 1
          fi
          
          echo "🎉 All health checks passed!"
        EOF
    
    - name: 📊 Deployment summary
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "🌐 Application URL: https://${{ secrets.DOMAIN_NAME || 'your-domain.com' }}"
        echo "📝 Server IP: ${{ secrets.SERVER_IP }}"
