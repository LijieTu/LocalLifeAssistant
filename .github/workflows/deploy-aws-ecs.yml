name: 🚀 Deploy to AWS ECS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1                    # Change to your preferred region
  ECR_BACKEND_REPOSITORY: locallife-backend
  ECR_FRONTEND_REPOSITORY: locallife-frontend
  ECS_SERVICE: locallife-service
  ECS_CLUSTER: locallife-cluster
  ECS_TASK_DEFINITION: locallife-task
  CONTAINER_NAME_BACKEND: backend
  CONTAINER_NAME_FRONTEND: frontend

jobs:
  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 🔑 Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: 🏗️ Build, tag, and push backend image to Amazon ECR
      id: build-backend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$IMAGE_TAG \
          -f deploy/docker/Dockerfile.backend .
        docker push $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: 🎨 Build, tag, and push frontend image to Amazon ECR
      id: build-frontend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        VITE_API_BASE_URL: ${{ secrets.BACKEND_URL || 'https://api.yourdomain.com' }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:$IMAGE_TAG \
          -f deploy/docker/Dockerfile.frontend \
          --build-arg VITE_API_BASE_URL=$VITE_API_BASE_URL .
        docker push $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: 📝 Download task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json

    - name: 🔄 Update backend container in task definition
      id: task-def-backend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME_BACKEND }}
        image: ${{ steps.build-backend.outputs.image }}

    - name: 🔄 Update frontend container in task definition
      id: task-def-frontend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
        container-name: ${{ env.CONTAINER_NAME_FRONTEND }}
        image: ${{ steps.build-frontend.outputs.image }}

    - name: 🚀 Deploy to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-frontend.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: 🔍 Health check
      run: |
        echo "⏳ Waiting 30 seconds for services to stabilize..."
        sleep 30
        
        # Get the load balancer URL from ECS service
        ALB_URL=$(aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --query 'services[0].loadBalancers[0].targetGroupArn' \
          --output text | xargs -I {} aws elbv2 describe-target-groups \
          --target-group-arns {} \
          --query 'TargetGroups[0].LoadBalancerArns[0]' \
          --output text | xargs -I {} aws elbv2 describe-load-balancers \
          --load-balancer-arns {} \
          --query 'LoadBalancers[0].DNSName' \
          --output text)
        
        echo "🌐 Load Balancer URL: $ALB_URL"
        
        # Health check
        if curl -f "http://$ALB_URL/health" > /dev/null 2>&1; then
          echo "✅ Backend health check passed"
        else
          echo "⚠️ Backend health check pending (may still be starting)"
        fi

    - name: 📊 Deployment summary
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "📦 Backend image: ${{ steps.build-backend.outputs.image }}"
        echo "📦 Frontend image: ${{ steps.build-frontend.outputs.image }}"
        echo "🌐 Region: ${{ env.AWS_REGION }}"
        echo "📝 Cluster: ${{ env.ECS_CLUSTER }}"
        echo "📝 Service: ${{ env.ECS_SERVICE }}"

