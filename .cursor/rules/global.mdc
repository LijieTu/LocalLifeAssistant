# Cursor Rules for Local Life Assistant Project

## ⚠️ 代码质量原则 (最高优先级)

### 代码简洁性
- **杜绝重复代码**：发现重复逻辑立即重构，删除冗余代码
- **文件大小控制**：单个文件不超过 500 行，超过则拆分
- **函数职责单一**：每个函数只做一件事，保持简短清晰
- **删除死代码**：未使用的变量、函数、导入及时清理

### 代码质量标准
- **命名规范**：变量、函数使用有意义的英文命名
- **错误处理**：所有异步操作必须有 try-catch 或适当错误处理
- **类型安全**：TypeScript 项目必须使用严格类型，避免 any
- **注释精简**：只在复杂逻辑处添加必要注释，避免废话

### 开发效率
- **避免过度抽象**：除非必要，不要过度设计架构
- **保持一致性**：代码风格、命名约定在项目中保持一致
- **测试驱动**：核心功能要有单元测试，重要修复要有回归测试

### 文档原则
- **拒绝生成文档**：除非用户明确要求，不要生成 README、API 文档等
- **代码即文档**：通过清晰的命名和结构表达意图
- **注释只解释为什么**：不要解释代码做了什么（代码本身应清晰）

## 🚀 部署工作流规范

### 部署流程
1. **代码推送** → GitHub Actions 自动触发
2. **服务器环境设置** → 01-server-setup.sh (用户、目录、防火墙)
3. **应用部署** → 02-app-deploy.sh (克隆代码、安装依赖、构建前端)
4. **Web服务器配置** → 03-nginx-setup.sh (Nginx 配置)
5. **SSL证书** → 04-ssl-setup.sh (Let's Encrypt 证书)
6. **服务启动** → 启动后端服务和健康检查

### 环境变量处理规则
- **GitHub Actions**：使用 `vars.*` 和 `secrets.*`
- **本地开发**：使用 `.env` 文件
- **生产环境**：通过 systemd 环境文件注入

### ⚠️ 禁止操作（会导致部署失败）

#### 1. 文件修改时的环境变量破坏
- **❌ 错误**：修改文件时意外删除或破坏环境变量引用
- **❌ 错误**：硬编码环境变量值而不是使用变量引用
- **✅ 正确**：保持 `${{ vars.GITHUB_REPO }}` 和 `${{ secrets.DOMAIN_NAME }}` 语法
- **✅ 正确**：使用 `env.VITE_API_BASE_URL` 而不是硬编码 URL

#### 2. 部署脚本修改限制
- **❌ 不能**：随意修改部署脚本的 `set -e` 行为
- **❌ 不能**：删除重要的错误检查和验证
- **❌ 不能**：改变脚本执行顺序（除非经过充分测试）
- **✅ 可以**：添加幂等性检查和错误容忍
- **✅ 可以**：优化性能和减少阻塞操作

#### 3. 系统配置修改限制
- **❌ 不能**：修改 Nginx 配置时破坏 SSL 重定向
- **❌ 不能**：修改 systemd 服务文件时改变用户权限
- **❌ 不能**：修改防火墙规则时关闭必要端口
- **✅ 可以**：添加新的安全头部和优化配置
- **✅ 可以**：改进日志和监控配置

#### 4. 依赖和构建问题
- **❌ 不能**：修改 package.json 时破坏构建脚本
- **❌ 不能**：修改 requirements.txt 时破坏虚拟环境
- **❌ 不能**：修改 Docker 配置时破坏生产环境
- **✅ 可以**：更新依赖版本（测试通过后）
- **✅ 可以**：添加新的依赖（经过安全审查）

## 技术栈说明

### 后端 (Python)
- **框架**: FastAPI (异步 Web 框架)
- **服务器**: Uvicorn (ASGI 服务器)
- **数据库**: ChromaDB (向量数据库，用于事件缓存)
- **AI 服务**: OpenAI API, Anthropic API
- **文本处理**: Sentence Transformers (文本嵌入)
- **数据验证**: Pydantic
- **地理服务**: Geopy
- **HTTP 客户端**: httpx, requests

### 前端 (TypeScript/React)
- **框架**: React 18 + TypeScript
- **构建工具**: Vite
- **样式**: Tailwind CSS
- **HTTP 客户端**: Axios
- **图标**: Lucide React

### 部署
- **Web 服务器**: Nginx (反向代理)
- **SSL**: Let's Encrypt (Certbot)
- **进程管理**: systemd
- **CI/CD**: GitHub Actions

## 前后端接口

### 主要 API 端点

#### 1. 聊天接口
```
POST /api/chat
Request: ChatRequest {
  message: string,
  conversation_history: ChatMessage[],
  llm_provider?: string,
  location?: LocationCoordinates
}
Response: ChatResponse {
  message: string,
  recommendations: RecommendationItem[],
  llm_provider_used: string,
  cache_used: bool,
  cache_age_hours?: float
}
```

#### 2. 地理编码接口
```
POST /api/geocode
Request: { input_text: string }
Response: {
  success: boolean,
  coordinates: LocationCoordinates | null,
  error_message: string | null
}
```

#### 3. 缓存清理接口
```
POST /api/cache/cleanup
Response: {
  success: boolean,
  message: string,
  stats: object
}
```

#### 4. 缓存统计接口
```
GET /api/cache/stats
Response: {
  success: boolean,
  stats: object
}
```

#### 5. 健康检查
```
GET /health
Response: {
  status: string,
  version: string,
  features: string[]
}
```

#### 6. 系统统计
```
GET /stats
Response: {
  status: string,
  cache_stats: object,
  features: string[]
}
```

### 前端 API 方法
- `chat()` - 发送聊天请求
- `geocodeLocation()` - 地理编码
- `getStats()` - 获取系统统计
- `healthCheck()` - 健康检查

## 开发规范
- 使用 TypeScript 进行类型检查
- 遵循 React Hooks 模式
- 使用 async/await 处理异步操作
- 错误处理要完善
- 日志记录要详细
